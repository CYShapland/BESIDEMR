library(roxygen2)
setwd("./BESIDEMR")
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
document()
devtools::document()
library("devtools")
library("devtools", lib.loc="~/R/win-library/3.6")
install.packages("backports")
library("devtools")
library(roxygen2)
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
install_github("CYShapland/BESIDEMR")
devtools::install()
library("BESIDEMR")
devtools::install()
library("BESIDEMR")
devtools::install()
devtools::document()
devtools::install()
library("BESIDEMR")
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
library("BESIDEMR")
library("BESIDEMR", lib.loc="~/R/win-library/3.6")
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
remove.packages("BESIDEMR", lib="~/R/win-library/3.6")
devtools::install()
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
devtools::install()
library("devtools")
library(roxygen2)
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
library("devtools")
library(roxygen2)
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
devtools::document()
devtools::install()
library("BESIDEMR")
a<-rnorm(10,0,1)
class(a)
str(a)
devtools::document()
devtools::document()
devtools::install()
library("BESIDEMR")
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/Teaching/MSc Epidemiology")
library(survival)
library(etm)
library(survminer)
library(cmprsk)
library(dplyr)
library(ggplot2)
seed<-5
set.seed(seed)
N_patients<-10000
treat<-rbinom(N_patients, 1,0.5)
#regression coefficients
beta0 <- 3
beta1 <- -0.3
exp(beta0)
exp(beta0 + beta1)
exp(-0.3)
seed<-5
set.seed(seed)
N_patients<-10000
treat<-rbinom(N_patients, 1,0.5)
#regression coefficients
beta0 <- 3
beta1 <- -0.3
#compute mu's
mu_control <- exp(beta0)
mu_treat <- exp(beta0 + beta1)
#generate Y-values
y_control <- rpois(n=1, lambda=(length(which(treat==0))/100)*mu_control)
y_treat <- rpois(n=1, lambda=(length(which(treat==1))/100)*mu_treat)
# Creating data for the risk ratio
IID<-seq(1:N_patients)
t1_treat<-runif(n=y_treat,1,10)
t1_control<-runif(n=y_control,1,10)
t1_treat
t1_control
t1_treat[i]
i<-1
t1_treat[i]
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/Teaching/MSc Epidemiology")
MI_treat<-matrix(0, y_treat, 11)
MI_treat[,1]<-rep(1,y_treat)
MI_treat[,2]<-t1_treat
head(MI_treat)
MI_treat<-matrix(0, y_treat, 12)
MI_treat[,1]<-rep(1,y_treat)
MI_treat[,2]<-t1_treat
head(MI_treat)
round(MI_treat[i,2])
(round(MI_treat[i,2])+2)
MI_treat<-matrix(0, y_treat, 12)
MI_treat[,1]<-rep(1,y_treat)
MI_treat[,2]<-t1_treat
head(MI_treat)
for(i in 1:y_treat){
i<-1
MI_treat[i,(round(MI_treat[i,2])+2)]<-1
}
head(MI_treat)
sum(apply(MI_treat[,2:11], 2,sum))
sum(apply(MI_treat[,3:11], 2,sum))
for(i in 1:y_treat){
MI_treat[i,(round(MI_treat[i,2])+2)]<-1
}
head(MI_treat)
sum(apply(MI_treat[,3:11], 2,sum))
MI_treat<-matrix(0, y_treat, 12)
MI_treat[,1]<-rep(1,y_treat)
MI_treat[,2]<-t1_treat
head(MI_treat)
for(i in 1:y_treat){
MI_treat[i,(round(MI_treat[i,2])+2)]<-1
}
head(MI_treat)
sum(apply(MI_treat[,3:11], 2,sum))
y_treat
sum(apply(MI_treat[,3:12], 2,sum))
MI_control<-matrix(0, y_control, 12)
MI_control[,1]<-rep(0,y_control)
MI_control[,2]<-t1_control
for(i in 1:y_control){
MI_control[i,(round(MI_control[i,2])+2)]<-1
}
head(MI_control)
sum(apply(MI_control[,3:12], 2,sum))
y_control
#no event
MI_noEvent<-matrix(0, N_patients-(y_treat+y_control), 11)
MI_noEvent[1:(length(which(treat==1))-y_treat),1]<-1
MI<-cbind(sample(1:N_patients,N_patients), rbind(MI_treat,MI_control,MI_noEvent))
data_MI<-as.data.frame(MI[order(MI[,1]),])
colnames(data_MI)<-c("IID", "treatment", paste("T",1:10,sep=""))
head(data_MI)
MI_control<-matrix(0, y_control, 12)
MI_control[,1]<-rep(0,y_control)
MI_control[,2]<-t1_control
for(i in 1:y_control){
MI_control[i,(round(MI_control[i,2])+2)]<-1
}
head(MI_control)
sum(apply(MI_control[,3:12], 2,sum))
#no event
MI_noEvent<-matrix(0, N_patients-(y_treat+y_control), 12)
MI_noEvent[1:(length(which(treat==1))-y_treat),1]<-1
N_patients-(y_treat+y_control)
length(which(treat==1))
(length(which(treat==1))-y_treat)
MI_noEvent[1:(length(which(treat==1))-y_treat),1]<-1
MI<-cbind(sample(1:N_patients,N_patients), rbind(MI_treat,MI_control,MI_noEvent))
data_MI<-as.data.frame(MI[order(MI[,1]),])
colnames(data_MI)<-c("IID", "treatment", "time_event", paste("T",1:10,sep=""))
head(data_MI)
table_MI<-matrix(0, 10,6)
table_MI[,1]<-apply(data_MI[which(data_MI$treatment==1),], 2,sum)[4:13]
table_MI[,2]<-apply(data_MI[which(data_MI$treatment==0),], 2,sum)[3:13]
table_MI[1,3]<-length(which(data_MI$treatment==1))
table_MI[1,4]<-length(which(data_MI$treatment==0))
for (i in 2:10){
table_MI[i,3]<-table_MI[(i-1),3]-table_MI[(i-1),1]
table_MI[i,4]<-table_MI[(i-1),4]-table_MI[(i-1),2]
}
for (i in 1:10){
table_MI[i,5]<-(table_MI[i,1]/table_MI[i,3])*100
table_MI[i,6]<-(table_MI[i,2]/table_MI[i,4])*100
}
apply(table_MI, 2,sum)
table_MI<-matrix(0, 10,6)
table_MI[,1]<-apply(data_MI[which(data_MI$treatment==1),], 2,sum)[4:13]
table_MI[,2]<-apply(data_MI[which(data_MI$treatment==0),], 2,sum)[4:13]
table_MI[1,3]<-length(which(data_MI$treatment==1))
table_MI[1,4]<-length(which(data_MI$treatment==0))
for (i in 2:10){
table_MI[i,3]<-table_MI[(i-1),3]-table_MI[(i-1),1]
table_MI[i,4]<-table_MI[(i-1),4]-table_MI[(i-1),2]
}
for (i in 1:10){
table_MI[i,5]<-(table_MI[i,1]/table_MI[i,3])*100
table_MI[i,6]<-(table_MI[i,2]/table_MI[i,4])*100
}
apply(table_MI, 2,sum)
MI<-cbind(sample(1:N_patients,N_patients), rbind(MI_treat,MI_control,MI_noEvent))
data_MI<-as.data.frame(MI[order(MI[,1]),])
colnames(data_MI)<-c("IID", "treatment", "time_event", paste("T",1:10,sep=""))
head(data_MI)
table_MI<-matrix(0, 10,6)
table_MI[,1]<-apply(data_MI[which(data_MI$treatment==1),], 2,sum)[4:13]
table_MI[,2]<-apply(data_MI[which(data_MI$treatment==0),], 2,sum)[4:13]
table_MI[1,3]<-length(which(data_MI$treatment==1))
table_MI[1,4]<-length(which(data_MI$treatment==0))
for (i in 2:10){
table_MI[i,3]<-table_MI[(i-1),3]-table_MI[(i-1),1]
table_MI[i,4]<-table_MI[(i-1),4]-table_MI[(i-1),2]
}
for (i in 1:10){
table_MI[i,5]<-(table_MI[i,1]/table_MI[i,3])*100
table_MI[i,6]<-(table_MI[i,2]/table_MI[i,4])*100
}
apply(table_MI, 2,sum)
lo<-loess(cumsum(table_MI[,5])~data_MI[,3])
data_MI[,3]
time<-1:10
lo<-loess(cumsum(table_MI[,5])~time)
lo2<-loess(cumsum(table_MI[,6])~time)
plot(cumsum(table_MI[,5]), col="red", type="l")
points(cumsum(table_MI[,6]), type="l")
plot(predict(lo), col="red", type="l", ylim=c(0,30))
points(predict(lo2), type="l")
seed<-5
set.seed(seed)
#regression coefficients
beta0 <- 3
beta1 <- -0.3
N_patients<-10000
treat<-rbinom(N_patients, 1,0.5)
dropout_rate<-0.4
dropout<-round(dropout_rate*length(which(treat==1)))
#compute mu's
mu_control <- exp(beta0)
mu_treat <- exp(beta0 + beta1)
#generate Y-values
y_control <- rpois(n=1, lambda=(length(which(treat==0))/100)*mu_control)
y_treat <- rpois(n=1, lambda=((length(which(treat==1))-dropout)/100)*mu_treat)
y_dropout<- rpois(n=1, lambda=(dropout/100)*mu_control)
# Creating data for the risk ratio
t1_treat<-runif(n=y_treat,1,10)
t1_control<runif(n=y_control,1,10)
t1_dropout<-runif(n=y_dropout,1,10)
t1_treat<-runif(n=y_treat,1,10)
t1_control<-runif(n=y_control,1,10)
t1_dropout<-runif(n=y_dropout,1,10)
y_treat
for(i in 1:y_treat){
MI_treat[i,(round(MI_treat[i,2])+3)]<-1
}
head(MI_treat)
sum(apply(MI_treat[,4:13], 2,sum))
MI_treat<-matrix(0, y_treat, 13)
MI_treat[,1]<-rep(1,y_treat)
MI_treat[,2]<-rep(0,y_treat)
MI_treat[,3]<-t1_treat
for(i in 1:y_treat){
MI_treat[i,(round(MI_treat[i,2])+3)]<-1
}
head(MI_treat)
sum(apply(MI_treat[,4:13], 2,sum))
t1_treat<-runif(n=y_treat,1,10)
t1_control<-runif(n=y_control,1,10)
t1_dropout<-runif(n=y_dropout,1,10)
#treatment assignment
MI_treat<-matrix(0, y_treat, 13)
MI_treat[,1]<-rep(1,y_treat)
MI_treat[,2]<-rep(0,y_treat)
MI_treat[,3]<-t1_treat
for(i in 1:y_treat){
MI_treat[i,(round(MI_treat[i,2])+3)]<-1
}
head(MI_treat)
sum(apply(MI_treat[,4:13], 2,sum))
t1_treat
MI_treat<-matrix(0, y_treat, 13)
MI_treat[,1]<-rep(1,y_treat)
MI_treat[,2]<-rep(0,y_treat)
MI_treat[,3]<-t1_treat
for(i in 1:y_treat){
MI_treat[i,(round(MI_treat[i,3])+3)]<-1
}
head(MI_treat)
sum(apply(MI_treat[,4:13], 2,sum))
MI_control<-matrix(0, y_control, 13)
MI_control[,1]<-rep(0,y_control)
MI_control[,2]<-rep(0,y_control)
MI_control[,3]<-t1_control
for(i in 1:y_control){
MI_control[i,(round(MI_control[i,3])+3)]<-1
}
head(MI_control)
sum(apply(MI_control[,3:12], 2,sum))
sum(apply(MI_control[,4:13], 2,sum))
MI_control<-matrix(0, y_control, 13)
MI_control[,1]<-rep(0,y_control)
MI_control[,2]<-rep(0,y_control)
MI_control[,3]<-t1_control
for(i in 1:y_control){
MI_control[i,(round(MI_control[i,3])+3)]<-1
}
head(MI_control)
sum(apply(MI_control[,4:13], 2,sum))
MI_dropout<-matrix(0, y_dropout, 13)
MI_dropout[,1]<-rep(1,y_dropout)
MI_dropout[,2]<-rep(1,y_dropout)
MI_dropout[,3]<-t1_dropout
for(i in 1:y_dropout){
MI_dropout[i,(round(MI_dropout[i,3])+3)]<-1
}
head(MI_dropout)
sum(apply(MI_dropout[,4:13], 2,sum))
#no event
MI_noEvent<-matrix(0, N_patients-(y_treat+y_control+y_dropout), 13)
MI_noEvent[1:(length(which(treat==1))-(y_treat+y_dropout)),1]<-1
MI_noEvent[1:(dropout-y_dropout),2]<-1
#combine all
MI<-cbind(sample(1:N_patients,N_patients), rbind(MI_treat,MI_control,MI_dropout,MI_noEvent))
data_MI<-as.data.frame(MI[order(MI[,1]),])
colnames(data_MI)<-c("IID", "treatment", "dropout", paste("T",1:10,sep=""))
head(data_MI)
dim(data_MI)
MI<-cbind(sample(1:N_patients,N_patients), rbind(MI_treat,MI_control,MI_dropout,MI_noEvent))
data_MI<-as.data.frame(MI[order(MI[,1]),])
colnames(data_MI)<-c("IID", "treatment", "dropout", "time_event", paste("T",1:10,sep=""))
head(data_MI)
dim(data_MI)
table_MI<-matrix(0, 10,6)
table_MI[,1]<-apply(data_MI[which(data_MI$treatment==1),], 2,sum)[5:14]
table_MI[,2]<-apply(data_MI[which(data_MI$treatment==0),], 2,sum)[5:14]
table_MI[1,3]<-length(which(data_MI$treatment==1))
table_MI[1,4]<-length(which(data_MI$treatment==0))
for (i in 2:10){
table_MI[i,3]<-table_MI[(i-1),3]-table_MI[(i-1),1]
table_MI[i,4]<-table_MI[(i-1),4]-table_MI[(i-1),2]
}
for (i in 1:10){
table_MI[i,5]<-(table_MI[i,1]/table_MI[i,3])*100
table_MI[i,6]<-(table_MI[i,2]/table_MI[i,4])*100
}
apply(table_MI, 2,sum)
time<-1:10
lo<-loess(cumsum(table_MI[,5])~time)
lo2<-loess(cumsum(table_MI[,6])~time)
plot(cumsum(table_MI[,5]), col="red", type="l")
points(cumsum(table_MI[,6]), type="l")
plot(predict(lo), col="red", type="l", ylim=c(0,30))
points(predict(lo2), type="l")
legend("topleft", legend=c("treatment", "control"), lty=c(1,1),col =c("red", "black"), cex=1.5, horiz=TRUE)
table_MI_dropout<-matrix(0, 10,9)
table_MI_dropout[,1]<-apply(data_MI[(data_MI$treatment==1 & data_MI$dropout==1),], 2,sum)[5:14]
table_MI_dropout[,2]<-apply(data_MI[(data_MI$treatment==1 & data_MI$dropout==0),], 2,sum)[5:14]
table_MI_dropout[,3]<-apply(data_MI[(data_MI$treatment==0),], 2,sum)[4:13]
table_MI_dropout[1,4]<-length(which(data_MI$dropout==1))
table_MI_dropout[1,5]<-length(which(data_MI$treatment==1))-length(which(data_MI$dropout==1))
table_MI_dropout[1,6]<-length(which(data_MI$treatment==0))
for (i in 2:10){
table_MI_dropout[i,4]<-table_MI_dropout[(i-1),4]-table_MI_dropout[(i-1),1]
table_MI_dropout[i,5]<-table_MI_dropout[(i-1),5]-table_MI_dropout[(i-1),2]
table_MI_dropout[i,6]<-table_MI_dropout[(i-1),6]-table_MI_dropout[(i-1),3]
}
for (i in 1:10){
table_MI_dropout[i,7]<-(table_MI_dropout[i,1]/table_MI_dropout[i,4])*100
table_MI_dropout[i,8]<-(table_MI_dropout[i,2]/table_MI_dropout[i,5])*100
table_MI_dropout[i,9]<-(table_MI_dropout[i,3]/table_MI_dropout[i,6])*100
}
apply(table_MI_dropout, 2,sum)
time<-1:10
lo<-loess(cumsum(table_MI_dropout[,7])~time)
lo2<-loess(cumsum(table_MI_dropout[,8])~time)
lo3<-loess(cumsum(table_MI_dropout[,9])~time)
plot(cumsum(table_MI_dropout[,7]), col="blue", type="l", ylim=c(0,30))
points(cumsum(table_MI_dropout[,8]), type="l", col="red")
points(cumsum(table_MI_dropout[,9]), type="l")
plot(predict(lo), type="l", col="blue", ylim=c(0,30))
points(predict(lo2), type="l", col="red")
points(predict(lo3), type="l")
legend("topleft", legend=c("attenders", "control", "non-attenders"), lty=c(1,1,1),col =c("red", "black", "blue"), cex=1.5, horiz=TRUE)
dim(data_MI)
table_MI_dropout<-matrix(0, 10,9)
table_MI_dropout[,1]<-apply(data_MI[(data_MI$treatment==1 & data_MI$dropout==1),], 2,sum)[5:14]
table_MI_dropout[,2]<-apply(data_MI[(data_MI$treatment==1 & data_MI$dropout==0),], 2,sum)[5:14]
table_MI_dropout[,3]<-apply(data_MI[(data_MI$treatment==0),], 2,sum)[5:14]
table_MI_dropout[1,4]<-length(which(data_MI$dropout==1))
table_MI_dropout[1,5]<-length(which(data_MI$treatment==1))-length(which(data_MI$dropout==1))
table_MI_dropout[1,6]<-length(which(data_MI$treatment==0))
for (i in 2:10){
table_MI_dropout[i,4]<-table_MI_dropout[(i-1),4]-table_MI_dropout[(i-1),1]
table_MI_dropout[i,5]<-table_MI_dropout[(i-1),5]-table_MI_dropout[(i-1),2]
table_MI_dropout[i,6]<-table_MI_dropout[(i-1),6]-table_MI_dropout[(i-1),3]
}
for (i in 1:10){
table_MI_dropout[i,7]<-(table_MI_dropout[i,1]/table_MI_dropout[i,4])*100
table_MI_dropout[i,8]<-(table_MI_dropout[i,2]/table_MI_dropout[i,5])*100
table_MI_dropout[i,9]<-(table_MI_dropout[i,3]/table_MI_dropout[i,6])*100
}
apply(table_MI_dropout, 2,sum)
time<-1:10
lo<-loess(cumsum(table_MI_dropout[,7])~time)
lo2<-loess(cumsum(table_MI_dropout[,8])~time)
lo3<-loess(cumsum(table_MI_dropout[,9])~time)
plot(cumsum(table_MI_dropout[,7]), col="blue", type="l", ylim=c(0,30))
points(cumsum(table_MI_dropout[,8]), type="l", col="red")
points(cumsum(table_MI_dropout[,9]), type="l")
plot(predict(lo), type="l", col="blue", ylim=c(0,30))
points(predict(lo2), type="l", col="red")
points(predict(lo3), type="l")
legend("topleft", legend=c("attenders", "control", "non-attenders"), lty=c(1,1,1),col =c("red", "black", "blue"), cex=1.5, horiz=TRUE)
exp(beta0 + beta1)
mu_treat <- exp(beta0 + beta1+ 0.3*rnorm(1000))
mu_treat
mu_treat <- exp(beta0 + beta1+ 0.3*rnorm(1000))
y_treat <- rpois(n=1, lambda=((length(which(treat==1))-dropout)/100)*mu_treat)
y_treat
mu_treat
(length(which(treat==1))-dropout)/100)*mu_treat
((length(which(treat==1))-dropout)/100)*mu_treat
set.seed(666)
x1 = rnorm(1000)           # some continuous variables
x2 = rnorm(1000)
z = 1 + 2*x1 + 3*x2        # linear combination with a bias
pr = 1/(1+exp(-z))         # pass through an inv-logit function
y = rbinom(1000,1,pr)      # bernoulli response variable
pr
y
y_treat
log(rnorm(1000))
install.packages("profvis")
install.packages("bench")
knitr::opts_chunk$set(echo = FALSE)
library(profvis)
library(bench)
profvis({
data(movies, package = "ggplot2movies") # Load data
movies = movies[movies$Comedy == 1,]
plot(movies$year, movies$rating)
model = loess(rating ~ year, data = movies) # loess regression line
j = order(movies$year)
lines(movies$year[j], model$fitted[j]) # Add line to the plot
})
install.packages("ggplot2movies")
library(ggplot2movies)
profvis({
data(movies, package = "ggplot2movies") # Load data
movies = movies[movies$Comedy == 1,]
plot(movies$year, movies$rating)
model = loess(rating ~ year, data = movies) # loess regression line
j = order(movies$year)
lines(movies$year[j], model$fitted[j]) # Add line to the plot
})
library(profvis)
library(bench)
library(ggplot2movies)
#profvis({
#  data(movies, package = "ggplot2movies") # Load data
#  movies = movies[movies$Comedy == 1,]
#  plot(movies$year, movies$rating)
#  model = loess(rating ~ year, data = movies) # loess regression line
#  j = order(movies$year)
#  lines(movies$year[j], model$fitted[j]) # Add line to the plot
#})
library(profvis)
library(bench)
library(ggplot2movies)
#profvis({
#  data(movies, package = "ggplot2movies") # Load data
#  movies = movies[movies$Comedy == 1,]
#  plot(movies$year, movies$rating)
#  model = loess(rating ~ year, data = movies) # loess regression line
#  j = order(movies$year)
#  lines(movies$year[j], model$fitted[j]) # Add line to the plot
#})
