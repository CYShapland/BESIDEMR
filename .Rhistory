library(epitools)
library(knitr)
library("forestplot")
require("ggplot2")
#load data
load(paste(wkdir, "Res_MetaAll_beta_carotene_AllCVD.Rdata", sep=""))
data.frame(Q1=1, Q2=1.06, Q3=1.07, Q4=0.90, Q5=1.32)%>%
kable(digits = 2)
data.frame(Measure=c("Median Diet Measure", "HR") ,Q1=c(1.94,1), Q2=c(1.96,1.06), Q3=c(2.11,1.07), Q4=c(2.20,0.90), Q5=c(2.40,1.32))%>%
kable(digits = 2)
N<-1000
Z<-rnorm(N, 0,1)
C<-rnorm(N, 0,1)
U<-rnorm(N, 0,1)
var_x<-rnorm(N,0,1)
var_y<-rnorm(N, 0,1)
X<-alpha_z*Z+alpha_c*C+alpha_u*U+var_x
Y<-beta_x*X+beta_c*C+beta_u*U+var_y
alpha_z<-0.248
alpha_c<-0.38
alpha_u<-0.38
#Coefficients for Y
beta_z<-0.248
beta_c<-0.38
beta_u<-0.38
X<-alpha_z*Z+alpha_c*C+alpha_u*U+var_x
Y<-beta_x*X+beta_c*C+beta_u*U+var_y
Z<-rnorm(N, 0,1)
C<-rnorm(N, 0,1)
U<-rnorm(N, 0,1)
var_x<-rnorm(N,0,1)
var_y<-rnorm(N, 0,1)
#Coefficients for X
alpha_z<-0.248
alpha_c<-0.38
alpha_u<-0.38
#Coefficients for Y
beta_x<-1
beta_c<-0.38
beta_u<-0.38
X<-alpha_z*Z+alpha_c*C+alpha_u*U+var_x
Y<-beta_x*X+beta_c*C+beta_u*U+var_y
X
Y
expit
expit()
eta_0<-0.5
eta_z<-1
eta_c<-0
eta_x<-0
eta_y<-0
lm_select<-eta_0+eta_z*Z + eta_c*C + eta_x*X + eta_y*Y
Prob_select<-exp(lm_select)/(1+exp(lm_select))
Prob_select
((2/3)+1/(2/3))
set.seed(4)
bias<-rep(0,1000)
for(i in 1:1000){
x<-rgamma(1000, shape=2, scale=3)
z<-1 + 0.5*x
prob_y<-1/(1+exp(-z))
y<-rbinom(n=1000,size=1, prob=prob_y)
lm<-glm(y~log(x), family="binomial")
bias[i]<-(coef(lm1)["log(x)"]/exp(1))*(((2/3)+1/(2/3)))-0.5
}
summary(bias)
set.seed(4)
bias<-rep(0,1000)
for(i in 1:1000){
x<-rgamma(1000, shape=2, scale=3)
z<-1 + 0.5*x
prob_y<-1/(1+exp(-z))
y<-rbinom(n=1000,size=1, prob=prob_y)
lm<-glm(y~log(x), family="binomial")
bias[i]<-(coef(lm)["log(x)"]/exp(1))*(((2/3)+1/(2/3)))-0.5
}
summary(bias)
set.seed(4)
bias<-rep(0,1000)
for(i in 1:1000){
x<-rgamma(1000, shape=2, scale=3)
z<-1 + 0.5*x
prob_y<-1/(1+exp(-z))
y<-rbinom(n=1000,size=1, prob=prob_y)
lm<-glm(y~log(x), family="binomial")
bias[i]<-(coef(lm)["log(x)"]/exp(1))*log(((2/3)+1/(2/3)))-0.5
}
summary(bias)
set.seed(4)
bias<-rep(0,1000)
for(i in 1:1000){
x<-rgamma(1000, shape=2, scale=3)
z<-1 + 0.5*x
prob_y<-1/(1+exp(-z))
y<-rbinom(n=1000,size=1, prob=prob_y)
lm<-glm(y~log(x), family="binomial")
bias[i]<-(coef(lm)["log(x)"]/exp(1))*log(((2*3)+1/(2*3)))-0.5
}
summary(bias)
set.seed(4)
bias<-rep(0,1000)
for(i in 1:1000){
x<-rgamma(1000, shape=2, scale=3)
z<-1 + 0.5*x
prob_y<-1/(1+exp(-z))
y<-rbinom(n=1000,size=1, prob=prob_y)
lm<-glm(y~log(x), family="binomial")
bias[i]<-((coef(lm)["log(x)"]/exp(1))*log(7/6))-0.5
}
summary(bias)
set.seed(4)
bias<-rep(0,1000)
for(i in 1:100){
x<-rgamma(1000, shape=2, scale=3)
z<-1 + 0.5*x
prob_y<-1/(1+exp(-z))
y<-rbinom(n=1000,size=1, prob=prob_y)
lm<-glm(y~log(x), family="binomial")
bias[i]<-(coef(lm)["log(x)"]/exp(1))-0.5
#bias[i]<-((coef(lm)["log(x)"]/exp(1))*log(7/6))-0.5
}
summary(bias)
set.seed(4)
bias<-rep(0,1000)
for(i in 1:1000){
x<-rgamma(1000, shape=2, scale=3)
z<-1 + 0.5*x
prob_y<-1/(1+exp(-z))
y<-rbinom(n=1000,size=1, prob=prob_y)
lm<-glm(y~log(x), family="binomial")
bias[i]<-(coef(lm)["log(x)"]/exp(1))-0.5
#bias[i]<-((coef(lm)["log(x)"]/exp(1))*log(7/6))-0.5
}
summary(bias)
log(301)-0.5*(log((205^2/301^2)+1))
1.032*log(301)-0.5*(log((205^2/301^2)+1))
log(1.032)*log(301)-0.5*(log((205^2/301^2)+1))
exp(log(1.032)*log(301)-0.5*(log((205^2/301^2)+1)))
exp((5000/252)*log(1.032)*log(301)-0.5*(log((205^2/301^2)+1)))
5000/252
exp(((5000/252)*log(1.032)*(log(302)-(0.5*(205^2/302^2))))
)
log(1.032)
log(1+(1/301))
log(1.032)*log(1+(1/301))
exp((5000/252)*log(1.032)*log(1+(1/301)))
(5000/252)*log(1.032)*log(1+(1/301))
data.frame(Author=c("Luo"),
RR=exp((5000/252)*log(1.032)*log(1+(1/301))),
RR_LC=exp((5000/252)*log(0.97)*log(1+(1/301))),
RR_UC=exp((5000/252)*log(1.10)*log(1+(1/301))),
Study=rep("MR", 1), Design=rep("Circ", 1), Dose=rep(1, 1))
diag(ncol(x))
diag(ncol(N))
x<-matrix(1,4,4)
diag(ncol(x))
#Variables
Z<-rmvnorm(N, 0, sigma)
mvrnorm(N, 0, sigma)
mvrnorm(
)
mvrnorm
install.packages("MASS")
library("MASS", lib.loc="~/R/win-library/3.6")
mvrnorm
mvrnorm(N, 0, sigma)
N<-1000
mvrnorm(N, 0, sigma)
sigma
Sigma = diag(3)
diag(3)
#Variables
Z<-mvrnorm(N, mu = rep(0,nSNP), Sigma = diag(nSNP))
nSNP<-10
#Variables
Z<-mvrnorm(N, mu = rep(0,nSNP), Sigma = diag(nSNP))
Z
Z<-mvrnorm(N, mu = rep(0,nSNP), Sigma = diag(nSNP))
C<-rnorm(N, 0,1)
U<-rnorm(N, 0,1)
var_x<-rnorm(N,0,1)
var_y<-rnorm(N, 0,1)
#Coefficients for X
#check code for simulating G, and R^2 variation explained
BXG_LB_T      = 0.34
BXG_UB_T      = 1.1
alpha_z<-runif(nSNP,BXG_LB_T, BXG_UB_T)
alpha_c<-0.38
alpha_u<-0.38
alpha_z
BXG_UB_T      = 0.5
#Coefficients for X
#check code for simulating G, and R^2 variation explained
BXG_LB_T      = 0.1
runif(nSNP,BXG_LB_T, BXG_UB_T)
BXG_LB_T      = 0.1
BXG_UB_T      = 0.2
runif(nSNP,BXG_LB_T, BXG_UB_T)
BXG_LB_T      = 0.1
BXG_UB_T      = 1
runif(nSNP,BXG_LB_T, BXG_UB_T)
N<-1000
nSNP<-10
#Variables
Z<-mvrnorm(N, mu = rep(0,nSNP), Sigma = diag(nSNP))
C<-rnorm(N, 0,1)
U<-rnorm(N, 0,1)
var_x<-rnorm(N,0,1)
var_y<-rnorm(N, 0,1)
#Coefficients for X
#check code for simulating G, and R^2 variation explained
BXG_LB_T      = 0.1
BXG_UB_T      = 1
alpha_z<-runif(nSNP,BXG_LB_T, BXG_UB_T)
alpha_c<-0.38
alpha_u<-0.38
#Coefficients for Y
beta_x<-1
beta_c<-0.38
beta_u<-0.38
alpha_z*Z+alpha_c*C+alpha_u*U+var_x
alpha_z
X<-alpha_z*Z+alpha_c*C+alpha_u*U+var_x
X
apply(alpha_z*Z,2, sum)
apply(alpha_z*Z,1, sum)
X<-apply(alpha_z*Z,1, sum)+alpha_c*C+alpha_u*U+var_x
Y<-beta_x*X+beta_c*C+beta_u*U+var_y
cor(Z)
eta_0<-0.5
eta_z<-0.640
eta_c<-0
eta_x<-0
eta_y<-0
lm_select<-eta_0+eta_z*Z + eta_c*C + eta_x*X + eta_y*Y
Prob_select<-exp(lm_select)/(1+exp(lm_select))
#Rachael selects participants that have probability of above 0.6
DataXY<-matrix(c(Z, X, Y), N,3)
DataXY[,3]<-ifelse(Prob_select>0.6, DataXY[,3], NA)
eta_0<-0.5
eta_z<-0
eta_c<-0
eta_x<-0.640
eta_y<-0
lm_select<-eta_0+eta_z*Z + eta_c*C + eta_x*X + eta_y*Y
Prob_select<-exp(lm_select)/(1+exp(lm_select))
#Rachael selects participants that have probability of above 0.6
DataXY<-matrix(c(Z, X, Y), N,3)
DataXY[,3]<-ifelse(Prob_select>0.6, DataXY[,3], NA)
#Rachael selects participants that have probability of above 0.6
DataXY<-matrix(c(Z, X, Y), N,(nSNP+2))
DataXY
DataXY[,(nSNP+1)]<-ifelse(Prob_select>0.6, DataXY[,(nSNP+1)], NA)
Prob_select
DataXY[,(nSNP+1)]
ifelse(Prob_select>0.6, DataXY[,(nSNP+1)], NA)
DataXY[,(nSNP+1)]
Prob_select
lm_select
eta_0<-0.5
eta_z<-0
eta_c<-0
eta_x<-0.640
eta_y<-0
eta_0+eta_z*Z + eta_c*C + eta_x*X + eta_y*Y
lm_select<-eta_0+apply(eta_z*Z,1, sum) + eta_c*C + eta_x*X + eta_y*Y
lm_select
lm_select<-eta_0+apply(eta_z*Z,1, sum) + eta_c*C + eta_x*X + eta_y*Y
Prob_select<-exp(lm_select)/(1+exp(lm_select))
#Rachael selects participants that have probability of above 0.6
DataXY<-matrix(c(Z, X, Y), N,(nSNP+2))
DataXY[,(nSNP+1)]<-ifelse(Prob_select>0.6, DataXY[,(nSNP+1)], NA)
DataXY
cor(DataXY[,1:nSNP])
cor(Z)
DataXY[complete.cases(DataXY), ]
dataXY_missX<-DataXY[complete.cases(DataXY), ]
cor(dataXY_missX[,1:nSNP])
cor(Z)
install.packages("psych")
library("psych", lib.loc="~/R/win-library/3.6")
Z_true<-cor(Z)
Z_missX<-cor(dataXY_missX[,1:nSNP])
nrow(Z)
nrow(dataXY_missX)
cortest.jennrich(Z_true,Z_missX,n1=nrow(Z), n2=nrow(dataXY_missX))
x <- matrix(rnorm(1000),ncol=10)
cortest.normal(x) #just test if this matrix is an identity
x <- sim.congeneric(loads =c(.9,.8,.7,.6,.5),N=1000,short=FALSE)
y <- sim.congeneric(loads =c(.9,.8,.7,.6,.5),N=1000,short=FALSE)
cortest.normal(x$r,y$r,n1=1000,n2=1000) #The Steiger test
cortest.jennrich(x$r,y$r,n1=100,n2=1000)
DataXY<-matrix(c(Z, X, Y), N,(nSNP+2))
DataXY[,(nSNP+1)]<-ifelse(Prob_select>0.8, DataXY[,(nSNP+1)], NA)
Z_true<-cor(Z)
dataXY_missX<-DataXY[complete.cases(DataXY), ]
Z_missX<-cor(dataXY_missX[,1:nSNP])
cortest.jennrich(Z_true,Z_missX,n1=nrow(Z), n2=nrow(dataXY_missX))
nrow(dataXY_missX)
eta_0<-0.5
eta_z<-0
eta_c<-0
eta_x<-0.3
eta_y<-0
lm_select<-eta_0+apply(eta_z*Z,1, sum) + eta_c*C + eta_x*X + eta_y*Y
Prob_select<-exp(lm_select)/(1+exp(lm_select))
#Rachael selects participants that have probability of above 0.6
DataXY<-matrix(c(Z, X, Y), N,(nSNP+2))
DataXY[,(nSNP+1)]<-ifelse(Prob_select>0.8, DataXY[,(nSNP+1)], NA)
Z_true<-cor(Z)
dataXY_missX<-DataXY[complete.cases(DataXY), ]
Z_missX<-cor(dataXY_missX[,1:nSNP])
cortest.jennrich(Z_true,Z_missX,n1=nrow(Z), n2=nrow(dataXY_missX))
cortest.jennrich(diag(nSNP),Z_missX,n1=nrow(Z), n2=nrow(dataXY_missX))
Z_missX
x$r
y$r
#Probability of an individual is selected
#Coefficients for X
eta_0<-0.5
eta_z<-0.4
eta_0<-0.5
eta_z<-0.4
eta_c<-0
eta_x<-0.40
eta_y<-0
lm_select<-eta_0+apply(eta_z*Z,1, sum) + eta_c*C + eta_x*X + eta_y*Y
Prob_select<-exp(lm_select)/(1+exp(lm_select))
DataXY<-matrix(c(Z, X, Y), N,(nSNP+2))
DataXY[,(nSNP+1)]<-ifelse(Prob_select>0.8, DataXY[,(nSNP+1)], NA)
Z_true<-cor(Z)
dataXY_missX<-DataXY[complete.cases(DataXY), ]
Z_missX<-cor(dataXY_missX[,1:nSNP])
cortest.jennrich(Z_true,Z_missX,n1=nrow(Z), n2=nrow(dataXY_missX))
eta_0<-0.5
eta_z<-0.4
eta_c<-0
eta_x<-0.40
eta_y<-0
lm_select<-eta_0+apply(eta_z*Z,1, sum) + eta_c*C + eta_x*X + eta_y*Y
Prob_select<-exp(lm_select)/(1+exp(lm_select))
#Rachael selects participants that have probability of above 0.6
DataXY<-matrix(c(Z, X, Y), N,(nSNP+2))
DataXY[,(nSNP+1)]<-ifelse(Prob_select>0.6, DataXY[,(nSNP+1)], NA)
Z_true<-cor(Z)
dataXY_missX<-DataXY[complete.cases(DataXY), ]
Z_missX<-cor(dataXY_missX[,1:nSNP])
cortest.jennrich(Z_true,Z_missX,n1=nrow(Z), n2=nrow(dataXY_missX))
Z_true
Z_missX
qt(0.9, 10)
qt(0.9, 10, lower.tail=F)
pt(1.372, 10)
pt(1.645006, 10)
pt(1.645006, 10000)
pt(1.645006, 10)
pt(1.645006, 10000)
pt(1.645006, 10000, lower.tail=F)
qt(0.9, 10, lower.tail=F)
qt(0.9, 10, lower.tail=T)
nSim<-100
library("psych", lib.loc="~/R/win-library/3.6")
corr.test()
corr.test
cortest
cortest.jennrich
diag(1)
diag(1,3,3)
cortest
cortest.mat
cortest.normal
cortest
library(devtools)
install_github("danieliong/MRPATH")
# To automatically update/download dependency packages
install_github("danieliong/MRPATH", upgrade=TRUE)
install_github("https://github.com/danieliong/MRPATH.git")
install_github("danieliong/MRPATH")
remotes::install_github("danieliong/MRPATH")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("danieliong/MRPATH")
remotes::install_github("danieliong/MRPATH",build_vignettes=T)
install_github("WSpiller/MRChallenge2019",build_vignettes=T)
install_github("WSpiller/MRChallenge2019",build_opts = c("--no-resave-data", "--no-manual"))
devtools::install_github("WSpiller/MRChallenge2019",build_opts = c("--no-resave-data", "--no-manual"))
library(devtools)
devtools::install_github("WSpiller/MRChallenge2019",build_opts = c("--no-resave-data", "--no-manual"))
install_github
library(devtools)
install_github("danieliong/MRPATH")
install_github
github_pat(1)
github_pat
Sys.getenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
install_github("danieliong/MRPATH")
install_github("danieliong/MRPATH")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library("rstan")
Sys.setenv(MAKEFLAGS = paste0("-j",parallel::detectCores()))
install.packages(c("StanHeaders","rstan"),type="source")
install.packages(c("StanHeaders", "rstan"), type = "source")
install.packages(c("StanHeaders", "rstan"), type = "source")
install_github("danieliong/MRPATH")
library(devtools)
install_github("danieliong/MRPATH")
install_github
github_pat(1)
github_pat
Sys.getenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
install_github("danieliong/MRPATH")
install_github("WSpiller/MRChallenge2019",build_opts = c("--no-resave-data", "--no-manual"))
.libpaths()
install.packages("C:/Users/ew18103/Downloads/MRPATH-master.zip", repos = NULL, type = "win.binary")
library(MRPATH)
library("MRPATH-master")
library
library("MRPATH-master", lib.loc="C:/Users/ew18103/OneDrive - University of Bristol/Documents/R/win-library/3.6")
library("MRPATH", lib.loc="C:/Users/ew18103/OneDrive - University of Bristol/Documents/R/win-library/3.6")
library("MRPATH", lib.loc="C:/Users/ew18103/OneDrive - University of Bristol/Documents/R/win-library/3.6/")
example("MR_PATH")
.libPaths()
.libPaths()
library("MRPATH-master")
library("MRPATH")
library("MRPATH")
.libPaths()
library("MRPATH_MASTER")
rt(1000, 5)
plot(density(rt(1000, 5)))
plot(density(rt(1000, 5))/6^2)
plot(density(rt(1000, 5)/6^2))
lines(density(rnorm(1000,0,0.04)))
plot(density(rt(1000, 4)/6^2))
lines(density(rnorm(1000,0,0.04)))
plot(density(rt(5000, 4)/6^2))
lines(density(rnorm(5000,0,0.04)))
plot(density(rt(5000, 5)/6^2))
lines(density(rnorm(5000,0,0.04)))
plot(density(rt(5000, 5)/6^2))
lines(density(rnorm(5000,0,0.04)), col="red")
plot(density(rt(5000, 5)))
plot(density(rt(5000, 10)))
plot(density(rt(5000, 5)))
plot(density(rt(5000, 10)), col="red")
plot(density(rt(5000, 5)))
lines(density(rt(5000, 10)), col="red")
lines(density(rt(5000, 30)), col="green")
lines(density(rnorm(5000,0,1)), col="orange")
plot(density(rt(10000, 5)))
lines(density(rt(10000, 10)), col="red")
lines(density(rt(10000, 30)), col="green")
lines(density(rnorm(10000,0,1)), col="orange")
plot(density(rt(10000, 5)/42))
lines(density(rt(10000, 10)/31), col="red")
lines(density(rt(10000, 30)/27), col="green")
lines(density(rnorm(10000,0,0.04)), col="orange")
summary(rt(10000, 5)/42)
summary(rnorm(10000,0,0.04))
summary(rt(10000, 30)/27)
summary(rt(10000, 5)/50)
summary(rt(10000, 4)/50)
plot(density(rt(10000, 4)/50))
lines(density(rnorm(10000,0,0.04)), col="orange")
lines(density(rt(10000, 5)/42), col="red")
library("BESIDEMR")
library("devtools")
devtools::check()
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/")
devtools::check()
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
devtools::check()
library("BESIDEMR")
.Last.error.trace
devtools::document()
devtools::check()
.Last.error.trace
devtools::check()
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
load("~/Pleiotropy/R/SumStat/Real_example/AMD_HDL_F10_METSIMdata_subset.Rdata")
dim(METSIM_amd_F10_subset)
library("BESIDEMR")
data(amd.hdl)
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
library(BESIDEMR)
library(roxygen2)
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/")
devtools::create("BESIDEMR")
setwd("C:/Users/ew18103/OneDrive - University of Bristol/Documents/GitHub_files/BESIDEMR")
devtools::document()
devtools::install()
library(BESIDEMR)
library(BESIDEMR)
library("BESIDEMR")
data(amd.hdl)
data(amd_hdl)
library(BESIDEMR)
data(amd_hdl)
devtools::create("BESIDEMR")
library(BESIDEMR)
